{"version":3,"sources":["components/ContactList/ContactList.module.css","components/redux/actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","components/redux/reducer.js","components/redux/store.js","index.js"],"names":["module","exports","contactsActions","addContacts","createAction","data","payload","id","uuidv4","name","number","deleteContacts","changeFilter","ContactForm","useState","setName","setNumber","contacts","useSelector","state","phonebook","items","dispatch","useDispatch","handleChange","event","target","currentTarget","value","console","warn","reset","onSubmit","preventDefault","find","contact","toLowerCase","alert","ContactsActions","type","onChange","pattern","title","required","placeholder","Filter","filter","ContactList","allContacts","normalizedFilter","includes","getVisibleContacts","className","style","listContact","map","contactItem","onClick","ondeleteContact","App","createReducer","actions","action","_","combineReducers","phonebookPersistConfig","key","storage","blacklist","log","process","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.620d20cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactList_contactItem__YyNOv\",\"listContact\":\"ContactList_listContact__1SOcs\"};","// import types from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContacts = createAction(\"contacts/add\", (data) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name: data.name,\r\n    number: data.number,\r\n  },\r\n}));\r\n// const addContacts = (data) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name: data.name,\r\n//     number: data.number,\r\n//   },\r\n// });\r\n\r\nconst deleteContacts = createAction(\"contacts/delete\");\r\n// const deleteContacts = createAction(types.DELETE);\r\n// const deleteContacts = (id) => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n// const changeFilter = createAction(types.CHANGE_FILTER);\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\nconst contactsActions = { addContacts, deleteContacts, changeFilter };\r\nexport default contactsActions;\r\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ContactsActions from \"../redux/actions\";\n\nfunction ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const contacts = useSelector((state) => state.phonebook.items);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    switch (event.target.name) {\n      case \"name\":\n        setName(event.currentTarget.value);\n        break;\n      case \"number\":\n        setNumber(event.currentTarget.value);\n        break;\n\n      default:\n        console.warn(`${event.target.value} not found`);\n    }\n  };\n  const handleAddContact = (event) => {\n    event.preventDefault();\n\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is already in contact`);\n    }\n    dispatch(ContactsActions.addContacts({ name, number }));\n    // onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleAddContact}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          value={name}\n          onChange={handleChange}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          placeholder=\"Name Surname\"\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          placeholder=\"111-11-11\"\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onSubmit: (data) => dispatch(ContactsActions.addContacts(data)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\nexport default ContactForm;\n\nContactForm.propTypes = {\n  contacts: PropTypes.array,\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleAddContact: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n\n// const formSubmit = (data) => {\n//   // console.log(data);\n//   const newContact = {\n//     id: uuidv4(),\n//     name: data.name,\n//     number: data.number,\n//   };\n//   // console.log(newContact);\n//  (contacts) => [newContact, ...contacts]);\n//   } else {\n//     alert(`${data.name} is already in contact`);\n//   }\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\nimport contactsActions from \"../redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Filter = () => {\n  const value = useSelector((state) => state.phonebook.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(event) =>\n          dispatch(contactsActions.changeFilter(event.target.value))\n        }\n      />\n    </label>\n  );\n};\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n// const mapStateToProps = (state) => ({\n//   value: state.phonebook.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (event) =>\n//     dispatch(contactsActions.changeFilter(event.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport contactsActions from \"../redux/actions\";\nimport style from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst ContactList = () => {\n  const contacts = useSelector((state) =>\n    getVisibleContacts(state.phonebook.items, state.phonebook.filter)\n  );\n  const dispatch = useDispatch();\n\n  const ondeleteContact = (id) => dispatch(contactsActions.deleteContacts(id));\n\n  return (\n    <ul className={style.listContact}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={style.contactItem}>\n          <p>\n            &#9742; {name}: {number}\n          </p>\n          <button type=\"button\" onClick={() => ondeleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n// const mapStateToProps = (state) => ({\n//   contacts: getVisibleContacts(state.phonebook.items, state.phonebook.filter),\n// });\n\n// const mapStateToProps = (state) => {\n//   const { filter, items } = state.phonebook;\n//   const normalizedFilter = filter.toLowerCase();\n//   const visibleContacts = getVisibleContacts(items, filter);\n//   return {\n//     contacts: state.phonebook.items,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => ({\n//   ondeleteContact: (id) => dispatch(contactsActions.deleteContacts(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  ondeleteContact: PropTypes.func,\n  contacts: PropTypes.array,\n};\n","import ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        {/* <ContactForm onSubmit={formSubmit} /> */}\n        <ContactForm />\n        <h2>Contacts</h2>\n\n        <Filter\n        //  value={filter} onChange={changeFilter}\n        />\n        <ContactList\n        // contacts={visibleContacts()}\n        // ondeleteContact={deleteContact}\n        />\n      </div>\n    </div>\n  );\n}\n\n// export default memo(App);\n// const [contacts, setContacts] = useState(() => {\n//   return JSON.parse(window.localStorage.getItem(\"contacts\")) ?? \"\";\n// });\n\n// useEffect(() => {\n//   window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n// }, [contacts]);\n\n// const formSubmit = (data) => {\n//   // console.log(data);\n//   const newContact = {\n//     id: uuidv4(),\n//     name: data.name,\n//     number: data.number,\n//   };\n//   // console.log(newContact);\n//  (contacts) => [newContact, ...contacts]);\n//   } else {\n//     alert(`${data.name} is already in contact`);\n//   }\n// };\n\n// const deleteContact = (contactId) => {\n//   setContacts(contacts.filter((contact) => contact.id !== contactId));\n// };\n\n// const changeFilter = (event) => {\n//   setFilter(event.currentTarget.value);\n// };\n\n// const visibleContacts = () => {\n//   const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./actions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContacts]: (state, action) => [...state, action.payload],\r\n  \"contacts/delete\": (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n  //   \"contacts/add\": (state, action) => [...state, action.payload],\r\n  //   \"contacts/delete\": (state, action) =>\r\n  //     state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// import types from \"./types\";\r\n// console.log(actions.addContacts.type);\r\n\r\n// {\r\n//     phonebook: {\r\n//         items: '',\r\n//         filter: ''\r\n//     }\r\n// }\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/changeFilter\":\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","// import { combineReducers } from \"redux\";\r\nimport {\r\n  configureStore,\r\n  // combineReducers,\r\n  // getDefaultMiddleware\r\n} from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport contactsReducer from \"./reducer\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nconst phonebookPersistConfig = {\r\n  key: \"phonebook\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconsole.log(process.env.NODE_ENV);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    phonebook: persistReducer(phonebookPersistConfig, contactsReducer),\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default {\r\n  store,\r\n  persistor,\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   // phonebook: contactsReducer,\r\n//   phonebook: persistReducer(persistConfig, contactsReducer),\r\n// });\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n// const rootReducer = combineReducers({\r\n//   phonebook: contactsReducer,\r\n// });\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   composeWithDevTools()\r\n// );\r\n// console.log(getDefaultMiddleware());\r\n// const middlewere = [...getDefaultMiddleware(), logger];\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./components/redux/store\";\n// import { myAction, myAction2 } from \"./components/redux/actions\";\n// console.log(store);\n// console.log(store.getState());\n// store.dispatch(myAction(5));\n// console.log(store.dispatch(myAction2));\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n    ;\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}